name: Terraform Module Governance (Central)

# This is a reusable workflow that can be called by any Terraform module repository
# in the grinntec-terraform-modules-azure organization
on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Working directory for Terraform files'
        required: false
        type: string
        default: '.'
      enable_security_scan:
        description: 'Enable Checkov security scanning'
        required: false
        type: boolean
        default: true
      enable_documentation:
        description: 'Enable terraform-docs generation'
        required: false
        type: boolean
        default: true
      auto_commit:
        description: 'Auto-commit documentation changes'
        required: false
        type: boolean
        default: true
      tf_docs_config:
        description: 'Path to terraform-docs config file (local path or URL)'
        required: false
        type: string        
        default: 'https://raw.githubusercontent.com/grinntec-terraform-modules-azure/.github/main/terraform-configs/tf-docs-standard.yaml'

jobs:
  terraform-governance:
    name: Terraform Module Governance
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Allow writing to repository content
      pull-requests: write  # Allow creating pull requests if needed
    
    steps:

      ## -------------------------------------------------------------------------------------------------------------- ##      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      
      ## -------------------------------------------------------------------------------------------------------------- ##          
      - name: Debug - Show Working Directory
        run: |
          echo "::group::Debug Information"
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "::endgroup::"

      ## -------------------------------------------------------------------------------------------------------------- ##          
      - name: Cache Terraform Providers
        uses: grinntec-terraform-modules-azure/.github/.github/actions/cache-terraform-providers@main
        
      ## -------------------------------------------------------------------------------------------------------------- ##
        # Extract Terraform version from versions.tf file
      # - name: Extract Terraform Version from Code
      #   id: tf-version
      #   run: |
      #     echo "::debug::Looking for Terraform version in versions.tf files"
          
      #     # Look for versions.tf in working directory and subdirectories
      #     VERSION_FILE=""
      #     if [ -f "${{ inputs.working_directory }}/versions.tf" ]; then
      #       VERSION_FILE="${{ inputs.working_directory }}/versions.tf"
      #     elif [ -f "versions.tf" ]; then
      #       VERSION_FILE="versions.tf"
      #     else
      #       echo "::error::No versions.tf file found. Please add a versions.tf file to your module."
      #       exit 1
      #     fi
          
      #     echo "::debug::Found versions.tf at: $VERSION_FILE"
          
      #     # Extract the minimum required version using grep and sed
      #     TF_VERSION=$(grep -A 1 'required_version' "$VERSION_FILE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
      #     if [ -z "$TF_VERSION" ]; then
      #       echo "::error::Could not parse Terraform version from $VERSION_FILE. Please specify required_version in versions.tf."
      #       exit 1
      #     else
      #       echo "::notice::Extracted Terraform version $TF_VERSION from $VERSION_FILE"
      #       echo "terraform-version=$TF_VERSION" >> $GITHUB_OUTPUT
      #     fi

      - name: Extract Terraform Version from Code
        id: tf-version
        uses: grinntec-terraform-modules-azure/.github/.github/actions/extract-terraform-version@main
        with:
          working_directory: ${{ inputs.working_directory }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf-version.outputs.terraform-version }}

      ## -------------------------------------------------------------------------------------------------------------- ##          
      - name: Debug - Show Terraform Version
        run: |
          echo "::debug::Terraform setup complete"
          echo "::debug::Extracted version: ${{ steps.tf-version.outputs.terraform-version }}"
          echo "::group::Terraform Version Information"
          terraform version
          echo "::endgroup::"
          
          # Extract version info
          TF_VERSION=$(terraform version -json | jq -r '.terraform_version')
          echo "::notice::Using Terraform version: $TF_VERSION"
          
          # Write to job summary
          {
            echo "## Terraform Version Information"
            echo "- **Extracted from versions.tf**: \`${{ steps.tf-version.outputs.terraform-version }}\`"
            echo "- **Version Used**: \`$TF_VERSION\`"
            echo ""
            echo "### Version Details"
            echo '```'
            terraform version
            echo '```'
            echo ""
            echo "Reference: https://github.com/hashicorp/terraform/releases"
            echo ""
          } >> $GITHUB_STEP_SUMMARY
      ## -------------------------------------------------------------------------------------------------------------- ##
      
      - name: Terraform Format
        uses: grinntec-terraform-modules-azure/.github/.github/actions/terraform-format-declarative@main
        with:
          working_directory: ${{ inputs.working_directory }}

    ## -------------------------------------------------------------------------------------------------------------- ##          
      - name: Terraform Validate
        uses: grinntec-terraform-modules-azure/.github/.github/actions/terraform-validate@main

      - name: TF_Lint
        uses: grinntec-terraform-modules-azure/.github/.github/actions/tf-lint@main

      - name: Terraform Security Scan
        if: ${{ inputs.enable_security_scan }}
        uses: grinntec-terraform-modules-azure/.github/.github/actions/terraform-security-scan@main
      
      - name: Terraform Documentation
        uses: grinntec-terraform-modules-azure/.github/.github/actions/terraform-docs@main
        with:
          working_directory: ${{ inputs.working_directory }}

      - name: Commit Documentation Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: auto-update documentation via terraform-docs"
          file_pattern: "README.md tf-management/tf-lint/results/tf-lint-results-module.txt tf-management/checkov/module/results_cli.txt"
          commit_options: '--no-verify'
          skip_dirty_check: false

          