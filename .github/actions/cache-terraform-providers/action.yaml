#######################################################################################################
# Composite Action: Cache Terraform Providers (Declarative)                                          #
#                                                                                                     #
# Purpose:                                                                                            #
#   - Sets up a cache for Terraform provider plugins to speed up CI/CD runs using declarative steps. #
#   - Uses the lockfile(s) as a cache key to ensure correct provider versions are cached/restored.     #
#                                                                                                     #
# How it works:                                                                                       #
#   - Declaratively configures and caches the plugin directory using actions/cache@v4.               #
#   - Uses GitHub Actions native features for logging and conditional logic.                          #
#   - Eliminates external shell scripts in favor of inline declarative steps.                         #
#                                                                                                     #
# Benefits of Declarative Approach:                                                                  #
#   - Easier to understand and maintain without external script dependencies.                         #
#   - Better integration with GitHub Actions workflow syntax and features.                            #
#   - More transparent execution with built-in GitHub Actions logging.                                #
#######################################################################################################

name: Cache Terraform Providers
description: Set up Terraform plugin cache for faster CI/CD runs

inputs:
  plugin_cache_dir:
    description: Directory to store plugin binaries
    required: false
    default: ${{ github.workspace }}/.terraform.d/plugin-cache
  lockfile_pattern:
    description: File pattern to hash for cache key
    required: false
    default: '**/.terraform.lock.hcl'

runs:
  using: composite
  steps:
    # Step 0: Set up Terraform plugin cache directory environment variable
    # - Ensures Terraform uses the cache directory for provider plugins
    - name: Configure Terraform Plugin Cache
      shell: bash
      run: echo "TF_PLUGIN_CACHE_DIR=${{ inputs.plugin_cache_dir }}" >> $GITHUB_ENV

    # Step 1: Create plugin cache directory
    # - Declarative directory creation using GitHub Actions
    - name: Create Plugin Cache Directory
      shell: bash
      run: mkdir -p "${{ inputs.plugin_cache_dir }}"

    # Step 2: Cache the Terraform provider plugins directory
    # - Uses actions/cache@v4 to cache the plugin directory
    # - The cache key is based on OS and the hash of all matching lockfiles
    # - Restore keys allow fallback to less specific caches if an exact match is not found
    - name: Cache Terraform Providers
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.plugin_cache_dir }}
        key: terraform-${{ runner.os }}-${{ hashFiles(inputs.lockfile_pattern) }}
        restore-keys: |
          terraform-${{ runner.os }}-
          terraform-

    # Step 3: Display cache configuration (declarative logging)
    - name: Display Cache Configuration
      shell: bash
      run: |
        echo "::group::Terraform Provider Cache Configuration"
        echo "Plugin Cache Directory: ${{ inputs.plugin_cache_dir }}"
        echo "Lockfile Pattern: ${{ inputs.lockfile_pattern }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Cache Key: terraform-${{ runner.os }}-${{ hashFiles(inputs.lockfile_pattern) }}"
        echo "::endgroup::"

    # Step 4: Display lockfiles found (declarative pattern matching)
    - name: Display Matching Lockfiles
      shell: bash
      run: |
        echo "::group::Terraform Lockfiles Found"
        find . -name "*.terraform.lock.hcl" -type f | head -10 || echo "No lockfiles found"
        echo "::endgroup::"

    # Step 5: Display cache result (declarative conditional)
    - name: Display Cache Result
      shell: bash
      run: |
        if [[ "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
          echo "::notice::âœ… Terraform provider cache hit! Using cached providers."
        else
          echo "::notice::ðŸ“¦ Terraform provider cache miss. Will populate cache with new providers."
        fi